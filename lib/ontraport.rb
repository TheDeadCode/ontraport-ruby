Dir[File.expand_path('../ontraport/*.rb', __FILE__)].each do |file|
  require file
end

module Ontraport
  BASE_URL = 'https://api.ontraport.com/'
  API_VERSION = '1'

  # Describe a given object type, including the numeric object Id and the available fields
  #
  # @example
  #   Ontraport.describe :contact
  #
  # @param object [Symbol] the type of object you want to describe
  # @return [Hash{String=>String,Hash}] object metadata. Keys are:
  #   - +'name'+ - name of the object
  #   - +'fields'+ - Hash containing the object's fields
  #   - +'object_id'+ - numeric Id of the object (as a String)
  def self.describe object
    unless object.class.eql? Symbol
      raise ArgumentError.new "Must provide a symbol for the object name."
    end

    unless metadata = objects_meta['data'].find{ |k, v| v['name'].downcase.to_sym.eql? object }
      raise ObjectNotFoundError.new "No object matching #{object.inspect} could be found."
    end

    metadata.second.update 'object_id' => metadata.first
  end

  # Clear the cache of object metadata generated by the describe call. Use this
  # if you make changes to custom fields or objects in your ONTRAPORT instance and
  # don't want to reload the Ontraport module.
  # 
  # @example
  #   Ontraport.clear_describe_cache!
  #
  # @return [nil]
  def self.clear_describe_cache!
    @objects_meta_cache = nil
  end

  # Retrieve a single object of the specified type.
  # 
  # @example
  #   contact = Ontraport.get_object :contact, 12345
  #
  # @param object_type [Symbol] the type of object, for instance +:contact+
  # @param id [Integer] Id of the record you want
  # @return [Hash{String=>Fixnum,Hash,Array,String}] a Hash containing 
  #   keys, +'code'+, +'data'+, +'updates'+, +'notifications'+, +'account_id'+
  def self.get_object object_type, id
    objects_call :get, object_type, endpoint: '/object', data: { id: id }
  end

  # Retrieve a collection of objects of the specified type, matching the query
  # specified by the parameters
  #
  # @example
  #   Ontraport.
  #
  # @param object_type [Symbol] the type of object
  # @param params [Hash] hash containing request parameters
  # @return [Hash{String=>Fixnum,Hash,Array,String}] a Hash containing
  #   keys, +'code'+, +'data'+, +'updates'+, +'notifications'+, +'account_id'+
  def self.get_objects object_type, params={}
    objects_call :get, object_type, endpoint: '/objects', data: params
  end

  def self.save_or_update object_type, params
    objects_call :post, object_type, endpoint: '/objects/saveorupdate', data: params
  end

  def self.update_object object_type, id, params
    objects_call :put, object_type, endpoint: '/objects', data: params.update(id: id)
  end

  def self.tag_objects object_type, params
    objects_call :put, object_type, endpoint: '/objects/tag', data: params
  end

  def self.untag_objects object_type, params
    objects_call :delete, object_type, endpoint: '/objects/tag', data: params
  end

  private
    def self.request_with_authentication method, endpoint:, data: nil
      data_param = method.eql?(:get) ? :query : :body

      args = [method, "#{BASE_URL}#{API_VERSION}#{endpoint}"]
      kwargs = {
        :headers => { 'Api-Appid' => @configuration.api_id, 'Api-Key' => @configuration.api_key },
        data_param => data
      }

      response = HTTParty.send *args, **kwargs

      unless response.code.eql? 200
        raise APIError.new response.body
      end

      response.parsed_response
    end

    def self.objects_call method, object_type, endpoint:, data: {}
      metadata = describe object_type
      data.update 'objectID' => metadata['object_id']

      request_with_authentication method, endpoint: endpoint, data: data
    end

    def self.objects_meta
      @objects_meta_cache ||= request_with_authentication :get, endpoint: '/objects/meta'
    end
end